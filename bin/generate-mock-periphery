#!/usr/bin/env ruby
# frozen_string_literal: true

require 'json'
require 'rexml/document'
require 'rexml/formatters/pretty'
require 'shellwords'
require 'tempfile'

FIXTURES_PATH = File.expand_path('../spec/support/fixtures', __dir__)
XCODEPROJ_PATH = File.join(FIXTURES_PATH, 'test.xcodeproj')
PERIPHERY_PATH = File.join(__dir__, 'periphery')
MOCK_PERIPHERY_PATH = File.join(FIXTURES_PATH, 'mock-periphery')

def sanitize_path_occurrences(source)
  source.gsub(FIXTURES_PATH, '#{__dir__}') # rubocop:disable Lint/InterpolationCheck
end

def prettify_xml(string)
  document = REXML::Document.new(string)
  formatter = REXML::Formatters::Pretty.new
  output = StringIO.new
  formatter.write(document, output)
  output.string.gsub("'", '"')
end

def prettify_json(string)
  object = JSON.parse(string).map { |h| h.sort.to_h }
  JSON.pretty_generate(object).lines.grep_v(/^\s+$/).join
end

def indent(depth, string)
  string.lines.map { |line| (' ' * depth) + line }.join
end

Dir.mktmpdir do |derived_data_path|
  system('xcodebuild', 'build', '-quiet',
         '-project', XCODEPROJ_PATH,
         '-scheme', 'test',
         '-configuration', 'Debug',
         '-destination', 'platform=macOS',
         '-derivedDataPath', derived_data_path)
  index_store_path = File.join(derived_data_path, 'Index', 'DataStore')
  periphery_command = [PERIPHERY_PATH, 'scan',
                       '--project', XCODEPROJ_PATH,
                       '--targets', 'test',
                       '--schemes', 'test',
                       '--skip-build',
                       '--index-store-path', index_store_path,
                       '--format']
  checkstyle_output = `#{periphery_command.shelljoin} checkstyle`
  json_output = `#{periphery_command.shelljoin} json`
  File.write(MOCK_PERIPHERY_PATH, <<~RUBY)
    #!/usr/bin/env ruby
    # frozen_string_literal: true

    # This script is generated by #{File.basename($PROGRAM_NAME)}.

    def format_equal?(format)
      ARGV.include?("--format=\#{format}") || ARGV.each_cons(2).include?(['--format', format.to_s])
    end

    if format_equal?(:checkstyle)
      puts <<~XML
    #{indent(4, sanitize_path_occurrences(prettify_xml(checkstyle_output)))}
      XML
    elsif format_equal?(:json)
      puts <<~JSON
    #{indent(4, sanitize_path_occurrences(prettify_json(json_output)))}
      JSON
    else
      raise "Neither :json nor :checkstyle format are specified; \#{ARGV}"
    end
  RUBY
end
